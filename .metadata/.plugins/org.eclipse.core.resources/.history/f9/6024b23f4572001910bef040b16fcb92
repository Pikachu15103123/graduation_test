import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import javax.annotation.Resource;

import cn.edu.ylxw.dao.CxcbDao;
import cn.edu.ylxw.dao.CxzbDao;
import cn.edu.ylxw.entity.Cxcb;
import cn.edu.ylxw.entity.Cxzb;

public class Apriori {
    @Resource
    private CxzbDao cxzbDao;
    @Resource
    private CxcbDao cxcbDao;

    private IdentityHashMap ruleMap = new IdentityHashMap();
    private int itemCounts = 0;// 候选1项目集大小,即字母的个数
    private TreeSet[] frequencySet = new TreeSet[400];// 频繁项集数组，[0]:代表1频繁集...，TreeSet（）使用元素的自然顺序对元素进行排序
    private TreeSet maxFrequency = new TreeSet();// 最大频繁集
    private TreeSet candidate = new TreeSet();
    private TreeSet candidateSet[] = new TreeSet[400];// 候选集数组[0]:代表1候选集
    private int frequencyIndex;

    public Apriori(String[] transSet) {
        maxFrequency = new TreeSet();
        itemCounts = counts(transSet);// 初始化1候选集的大小6个
        for (int i = 0; i < itemCounts; i++) {
            frequencySet[i] = new TreeSet();// 初始化频繁项集数组
            candidateSet[i] = new TreeSet();// 初始化候选集数组
        }
        candidateSet[0] = candidate;// 1候选集
    }

    public static Map<String, Object> countZcdZxd(double minsup, double minconf, String[] transSet) {
        Apriori ap = new Apriori(transSet);
        Map<String, Object> zbidString = ap.run(transSet, minsup, minconf);
        return zbidString;
    }

    public Map<String, Object> run(String[] transSet, double minsup, double minconf) {
        int k = 1;
        item1_gen(transSet, minsup); // 求1频繁集
        do {
            k++;
            canditate_gen(k);// 求K候选集
            frequent_gen(k, transSet, minsup);// 求K频繁集
        } while (!is_frequent_empty(k));
        frequencyIndex = k - 1;
        maxfrequent_gen();
        ruleGen(transSet, minconf);
        Map<String, Object> map = rulePrint(transSet);
        return map;
    }

    public double count_sup(String x, String[] transSet) {
        int temp = 0;
        for (int i = 0; i < transSet.length; i++) {
            for (int j = 0; j < x.length(); j++) {
                if (transSet[i].indexOf(x.charAt(j)) == -1)// 返回指定字符在此字符串中第一次出现处的索引，如果不作为一个字符串，返回-1
                    break;
                else if (j == (x.length() - 1))
                    temp++;
            }
        }
        return temp;
    }

    public int counts(String[] transSet) {

        String temp1 = null;
        char temp2 = 'a';
        // 遍历所有事务集String 加入集合，set自动去重了
        for (int i = 0; i < transSet.length; i++) {
            temp1 = transSet[i];
            for (int j = 0; j < temp1.length(); j++) {
                temp2 = temp1.charAt(j);// 返回位置为j的temp1的值a
                candidate.add(String.valueOf(temp2));// treeSet添加会去掉重复的值
            }
        }
        return candidate.size();// 中元素个数不重复，且递增排序
    }

    public void item1_gen(String[] transSet, double minsup) {
        String temp1 = "";
        double m = 0;

        Iterator temp = candidateSet[0].iterator();// 使用方法iterator()要求容器返回一个Iterator。
        while (temp.hasNext()) {// 遍历temp（1候选集）
            temp1 = (String) temp.next();
            m = count_sup(temp1, transSet);// 调用下面的方法，统计1候选集中每个元素个数，计算支持度时，用此m/transSet.length

            if (m >= minsup * transSet.length) {// minsup * transSet.length的值为记录每个事务中的元素出现次数,判断是否1频繁集
                frequencySet[0].add(temp1);// 1频繁集加入频繁项集数组，自动出去重复的集合
            }
        }
    }

    public void canditate_gen(int k) {
        String y = "", z = "", m = "";
        char c1, c2;

        Iterator temp1 = frequencySet[k - 2].iterator();// iterator迭代器，用于数组遍历
        Iterator temp2 = frequencySet[0].iterator();// 遍历频繁项集数组，[0]:代表1频繁集
        TreeSet h = new TreeSet();

        while (temp1.hasNext()) {
            y = (String) temp1.next();//
            c1 = y.charAt(y.length() - 1);// 返回指定y.length() - 1（数组的最后一个）的char值

            while (temp2.hasNext()) {
                z = (String) temp2.next();

                c2 = z.charAt(0);// c2=a,b,c,d,e,f
                if (c1 >= c2)
                    continue;
                else {
                    m = y + z;// m为字符串组合yz
                    h.add(m);// m加入TreeSet
                }
            }
            temp2 = frequencySet[0].iterator();
        }
        candidateSet[k - 1] = h;
    }

    public void frequent_gen(int k, String[] transSet, double minsup) {
        String s1 = "";

        Iterator ix = candidateSet[k - 1].iterator();// 遍历K候选集ix
        while (ix.hasNext()) {
            s1 = (String) ix.next();// ix中的值s1
            if (count_sup(s1, transSet) >= (minsup * transSet.length)) {// s1项集支持度大于最小支持度
                frequencySet[k - 1].add(s1);// s1加入K频繁集中
            }
        }
    }

    public boolean is_frequent_empty(int k) {
        if (frequencySet[k - 1].isEmpty())
            return true;
        else
            return false;
    }

    public void maxfrequent_gen() {
        int i;
        for (i = 1; i < frequencyIndex; i++) {
            maxFrequency.addAll(frequencySet[i]);
        }
    }

    public void ruleGen(String[] transSet, double minconf) {
        String s;
        Iterator iterator = maxFrequency.iterator();
        while (iterator.hasNext()) {
            s = (String) iterator.next();
            subGen(s, transSet, minconf);
        }
    }

    public void subGen(String s, String[] transSet, double minconf) {
        String x = "", y = "";
        for (int i = 1; i < (1 << s.length()) - 1; i++) {
            for (int j = 0; j < s.length(); j++) {
                if (((1 << j) & i) != 0) {
                    x += s.charAt(j);
                }
            }

            for (int j = 0; j < s.length(); j++) {
                if (((1 << j) & (~i)) != 0) {

                    y += s.charAt(j);

                }
            }
            if (count_sup(x + y, transSet) / count_sup(x, transSet) >= minconf) {
                ruleMap.put(x, y);
            }
            x = "";
            y = "";

        }
    }

    public Map<String, Object> rulePrint(String[] transSet) {
        String x, y;
        float temp = 0;
        float zcd = 0;
        Set hs = ruleMap.keySet();// 迭代后只能用get取key，Set不包含重复元素的collection
        Iterator iterator = hs.iterator();
        System.out.println("关联规则：");
        Map<String, Object> map = new HashMap<String, Object>();
        Cxzb cxzb = new Cxzb();
        map.put("cxzb", cxzb);
        List<Cxcb> cxcbs = new ArrayList<Cxcb>();

        while (iterator.hasNext()) {
            x = (String) iterator.next();
            y = (String) ruleMap.get(x);
            if (x.length() == 1 && y.length() == 1) {

                temp = (float) (count_sup(x + y, transSet) / count_sup(x, transSet));
                zcd = (float) (count_sup(x + y, transSet) / transSet.length);

                DecimalFormat fnum = new DecimalFormat("##0.00");
                String zxd1 = fnum.format(temp);
                String zcd1 = fnum.format(zcd);
                // 支持度: P(A∪B)，即A和B这两个项集在事务集D中同时出现的概率。
                // 置信度: P(B｜A)，即在出现项集A的事务集D中，项集B也同时出现的概率。

                Cxcb cxcb = new Cxcb();
                cxcb.setWpmc1(x);
                cxcb.setWpmc2(y);
                cxcb.setZxd(Float.parseFloat(zxd1));
                cxcb.setZcd(Float.parseFloat(zcd1));
                cxcb.setSaveDate(cxzb.getBcsj());
                cxcb.setZbid(cxzb.getId());
                cxcbs.add(cxcb);

                System.out.println(x + "-->" + y + "\t" + "置信度: " + zxd1 + "\t支持度：" + zcd1);
            }
        }
        map.put("cxcbs", cxcbs);
        return map;
    }
}

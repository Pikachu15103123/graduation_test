package com.apriori;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class FPGrowth {

    private int minSup;

    /**
     * @param args
     */
    public static void main(String[] args) {
        FPGrowth fpg = new FPGrowth();
        fpg.setMinSup(1000);
        List<String> data = fpg.buildData("retail.dat");
        FP_Growth[] f1FP_Growths = fpg.buildF1FP_Growths(data);

        Map<String, List<String>> condBase;
        //FP_Growth fpTree = fpg.buildFPTree(data, f1FP_Growths);
        fpg.buildFPTree(data, f1FP_Growths);
        // fpg.fpGrowth();
/*
        fpg.printFPTree(fpTree);
        fpg.printF1FP_Growths(f1FP_Growths);*/
        condBase = fpg.buildCondBase(f1FP_Growths);
    //  fpg.printCondBase(condBase);
        Map<String, FP_Growth> condFPTree = fpg.buildCondFPTree(condBase);
    //  fpg.printCondFPTree(condFPTree);
        //输出频繁子集
        Map<String, List<List<String>>> fpSetMap = fpg.fpGrowth(condFPTree);
        fpg.printFPSet(fpSetMap);


    }
    /**
     * 输出频繁集
     */
    public void printFPSet(Map<String, List<List<String>>> fpSetMap){
        List<List<String>> fpSet;

        Set<String> FP_Growths = fpSetMap.keySet();
        for(String FP_Growth : FP_Growths){
            System.out.println(FP_Growth);
            fpSet = fpSetMap.get(FP_Growth);
            for (int i = 0; i < fpSet.size(); i++) {
                for (String str : fpSet.get(i)) {
                //  if(str != null && str.length() > 0){
                        System.out.print(str + ", ");
                //  }

                }
                System.out.println(FP_Growth);
            }
        }
    }

    // 输出fpTree
    public void printFPTree(FP_Growth root) {
        System.out.print(root.getValue() + ", " + root.getCounter() + " "
                + root.getNextFP_Growth().size() + ": ");
        List<FP_Growth> subFP_Growths = root.getNextFP_Growth();
        if (subFP_Growths.size() != 0) {
            for (int i = 0; i < subFP_Growths.size(); i++) {
                printFPTree(subFP_Growths.get(i));
            }
            System.out.println();
        }

    }

    // 输出频繁1项集
    public void printF1FP_Growths(FP_Growth[] f1FP_Growths) {
        for (FP_Growth FP_Growth : f1FP_Growths) {

            while ((FP_Growth = FP_Growth.getSibling()) != null) {
                System.out.print("FP_Growth: " + FP_Growth.getValue() + ": "
                        + FP_Growth.getCounter() + " ,");
                if (FP_Growth.getPreFP_Growth() != null) {
                    System.out.println(FP_Growth.getPreFP_Growth().getValue());
                }
            }
            System.out.println();
        }
    }

    // 输出条件模式基
    public void printCondBase(Map<String, List<String>> condBaseMap) {

        Set<String> FP_Growths = condBaseMap.keySet();
        List<String> conBase;
        for (String FP_Growth : FP_Growths) {
            System.out.print("FP_Growth: " + FP_Growth);
            conBase = condBaseMap.get(FP_Growth);
            System.out.println(", " + conBase.size());
            for (String str : conBase) {
                System.out.println(str + " ");
            }
        }
    }

    // 输出条件fp树
    public void printCondFPTree(Map<String, FP_Growth> condFPTreeMap) {
        Set<String> FP_Growths = condFPTreeMap.keySet();
        for (String FP_Growth : FP_Growths) {
            System.out.println("FP_Growth: " + FP_Growth);
            this.printFPTree(condFPTreeMap.get(FP_Growth));
        }
    }

    /**
     * 1.构造数据集
     */
    public List<String> buildData(String...fileName) {

        List<String> data = new ArrayList<String>();
        if(fileName.length !=0){
            File file = new File(fileName[0]);
            try {
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String line;
                while( (line = reader.readLine()) != null){
                    data.add(line);
                }

            } catch (FileNotFoundException e) {

                e.printStackTrace();
            } catch (IOException e) {

                e.printStackTrace();
            }
        }else{

            data.add("I1 I2 I5");
            data.add("I2 I4");
            data.add("I2 I3");
            data.add("I1 I2 I4");
            data.add("I1 I3");
            data.add("I2 I3");
            data.add("I1 I3");
            data.add("I1 I2 I3 I5");
            data.add("I1 I2 I3");
        }
        return data;
    }

    /**
     * 2.构造频繁1项列表，同时作为树的项头表
     */
    public FP_Growth[] buildF1FP_Growths(List<String> data) {
        List<FP_Growth> FP_GrowthList = new ArrayList<FP_Growth>();
        Map<String, FP_Growth> resultMap = new HashMap<String, FP_Growth>();
        for (String trans : data) {

            String[] FP_Growths = trans.trim().split(" ");
            int i;
            for (String FP_Growth : FP_Growths) {

                if(resultMap.get(FP_Growth) == null){
                    FP_Growth newFP_Growth = new FP_Growth();
                    newFP_Growth.setValue(FP_Growth);
                    newFP_Growth.setCounter(1);
                    resultMap.put(FP_Growth, newFP_Growth);
                }else{
                    resultMap.get(FP_Growth).addCounter();
                }
            }
        }
        Set<String> keySet = resultMap.keySet();
        for(String key : keySet){
            FP_GrowthList.add(resultMap.get(key));
        }
        List<FP_Growth> result = new ArrayList<FP_Growth>();
        // 把支持度小于minSup的项从列表中删除
        for (int i = 0; i < FP_GrowthList.size(); i++) {
            if (FP_GrowthList.get(i).getCounter() >= this.minSup) {
                result.add(FP_GrowthList.get(i));
            }
        }

        // 对列表进行排序
        FP_Growth[] f1FP_Growths = result.toArray(new FP_Growth[0]);
        Arrays.sort(f1FP_Growths);

        return f1FP_Growths;
    }

    /**
     * 3. 构造fpTree
     */
    public FP_Growth buildFPTree(List<String> data, FP_Growth[] f1FP_Growths) {

        FP_Growth fpTree = new FP_Growth();
        List<FP_Growth> subFP_Growths;
        // 对每一条事务进行处理
        for (String trans : data) {

            // 得出每条事件中涉及的元素项
            String[] FP_Growths = trans.trim().split(" ");
            // 对FP_Growths中的元素按其在频繁1项集中出现次数排序
            FP_Growths = sortFP_Growth(FP_Growths, f1FP_Growths);
            // 把FP_Growths的值加入到fpTree中
            subFP_Growths = fpTree.getNextFP_Growth();

            if (subFP_Growths.size() == 0) {
                this.addLeaf(fpTree, FP_Growths, f1FP_Growths);
            } else {
                FP_Growth temp = null;

                for (int i = 0; i < FP_Growths.length; i++) {
                    int j = 0;
                    int size = subFP_Growths.size();
                    for (; j < subFP_Growths.size(); j++) {
                        if (subFP_Growths.get(j).getValue().equals(FP_Growths[i])) {
                            temp = subFP_Growths.get(j);
                            temp.addCounter();
                            subFP_Growths = temp.getNextFP_Growth();
                            break;
                        }
                    }

                    if (j == size) {
                        if (temp == null) {
                            this.addLeaf(fpTree, Arrays.copyOfRange(FP_Growths, i,
                                    FP_Growths.length), f1FP_Growths);
                        } else {
                            this.addLeaf(temp, Arrays.copyOfRange(FP_Growths, i,
                                    FP_Growths.length), f1FP_Growths);
                        }
                        break;
                    }
                }
            }

        }
        return fpTree;
    }

    /**
     * 3.1 对元素数组根据其在f1中出面的频繁进行排序
     * 
     * @param FP_Growths
     * @return
     */
    public String[] sortFP_Growth(String[] FP_Growths, FP_Growth[] f1FP_Growths) {

        String[] temp = new String[f1FP_Growths.length];
        int i;
        for (String FP_Growth : FP_Growths) {
            for (i = 0; i < f1FP_Growths.length; i++) {
                if (FP_Growth.equals(f1FP_Growths[i].getValue())) {
                    temp[i] = FP_Growth;
                }
            }
        }
        List<String> list = new ArrayList<String>();
        int j = 0;
        for (i = 0; i < temp.length; i++) {
            if (temp[i] != null) {
                list.add(temp[i]);
            }
        }

        return list.toArray(new String[0]);
    }

    /**
     * 3.2 给FPTree的节点添加子节点序列
     * 
     * @param preFP_Growth
     * @param FP_Growths
     */
    public void addLeaf(FP_Growth preFP_Growth, String[] FP_Growths, FP_Growth[] f1FP_Growths) {
        if (FP_Growths.length > 0) {
            FP_Growth FP_Growth = new FP_Growth(FP_Growths[0]);
            FP_Growth.setCounter(1);
            FP_Growth.setPreFP_Growth(preFP_Growth);
            preFP_Growth.addNextFP_Growth(FP_Growth);

            for (FP_Growth i : f1FP_Growths) {
                if (i.getValue().equals(FP_Growths[0])) {
                    FP_Growth temp = i;
                    while (temp.getSibling() != null) {
                        temp = temp.getSibling();
                    }
                    temp.setSibling(FP_Growth);
                    break;
                }
            }
            if (FP_Growths.length > 1) {
                addLeaf(FP_Growth, Arrays.copyOfRange(FP_Growths, 1, FP_Growths.length),
                        f1FP_Growths);
            }
        }

    }

    // 4.生成条件模式基
    public Map<String, List<String>> buildCondBase(FP_Growth[] f1FP_Growths) {

        FP_Growth FP_Growth = null; // 横向处理时的当前节点
        FP_Growth preFP_Growth = null; // 横向处理的当前节点对应的纵向节点
        int counter = 0;
        StringBuffer data;

        Map<String, List<String>> condBaseMap = new HashMap<String, List<String>>();
        List<String> conditionBase; // 条件模式基
        // 逆向遍历频繁1项集(但不需处理其第一项)
        for (int i = f1FP_Growths.length - 1; i > 0; i--) {

            conditionBase = new ArrayList<String>();
            FP_Growth = f1FP_Growths[i].getSibling();
            while (FP_Growth != null) { // 横向处理

                counter = FP_Growth.getCounter();
                preFP_Growth = FP_Growth.getPreFP_Growth();
                data = new StringBuffer();
                while (preFP_Growth.getValue() != null) { // 纵向处理
                    data.append(preFP_Growth.getValue() + " ");
                    preFP_Growth = preFP_Growth.getPreFP_Growth();
                }
                for (int j = 0; j < counter; j++) {
                    if (data.toString().trim() != ""
                            && data.toString().trim().length() > 0) {
                        conditionBase.add(data.toString().trim());
                    }
                }
                FP_Growth = FP_Growth.getSibling();
            }
            condBaseMap.put(f1FP_Growths[i].getValue(), conditionBase);
        }

        return condBaseMap;
    }

    // 5.生成条件FP树
    public Map<String, FP_Growth> buildCondFPTree(
            Map<String, List<String>> condBaseMap) {

        Map<String, FP_Growth> condFPTreeMap = new HashMap<String, FP_Growth>();
        List<String> condBase;
        FP_Growth condFPTree;
        Set<String> FP_Growths = condBaseMap.keySet();
        for (String FP_Growth : FP_Growths) {
            condBase = condBaseMap.get(FP_Growth);
            condFPTree = this
                    .buildFPTree(condBase, this.buildF1FP_Growths(condBase));
            // 删除condFPTree树中节点出现次数少于最小支持度的点
            this.delLTminSup(condFPTree);
            condFPTreeMap.put(FP_Growth, condFPTree);
        }

        return condFPTreeMap;
    }

    /**
     * 5.1  删除树中节点计数小于最小支持度的节点
     * 
     * @param root
     */
    public void delLTminSup(FP_Growth root) {
        List<FP_Growth> subFP_Growths = root.getNextFP_Growth();
        if (subFP_Growths.size() != 0) {
            for (int i = 0; i < subFP_Growths.size(); i++) {
                if (subFP_Growths.get(i).getCounter() < this.minSup) {
                    subFP_Growths.remove(i);
                } else {
                    delLTminSup(subFP_Growths.get(i));
                }
            }
        }
    }

    /**
     * 6.产生频繁模式 根据前面生成的条件FP树，分别产生相应元素相关的频繁模式
     */
    public Map<String,List<List<String>>> fpGrowth(Map<String, FP_Growth> condFPTreeMap) {

        List<List<String>> result;
        Map<String, List<List<String>>> resultMap = new HashMap<String, List<List<String>>>();
        Set<String> FP_Growths = condFPTreeMap.keySet();
        FP_Growth condFPTree = null;
        List<String> pathList; // 一个条件fp树中所有的路径
        List<String> stack = new ArrayList<String>();

        for (String FP_Growth : FP_Growths) {

            pathList = new ArrayList<String>();
            condFPTree = condFPTreeMap.get(FP_Growth);
            buildPath(stack, condFPTree, pathList);

            for(String str : pathList){
                result = new ArrayList<List<String>>();
                if(str.trim().length() != 0){
                    String[] temp = str.trim().split(" ");
                    List<String> nodeList = new ArrayList<String>();
                    for(String t : temp){
                        nodeList.add(t);
                    }

                    buildSubSet(nodeList, result);

                    if(resultMap.get(FP_Growth) == null){
                        resultMap.put(FP_Growth, result);
                    }else{
                        List<List<String>> list = resultMap.get(FP_Growth);
                        for( int  i = 0; i < result.size(); i++){
                            list.add(result.get(i));
                        }
                        resultMap.put(FP_Growth, list);
                    }
                }   
            }
        }

        return resultMap;
    }

    // 6.1 生成树的每一条路径
    public void buildPath(List<String> stack, FP_Growth root, List<String> pathList) {

        if (root != null) {
            stack.add(root.getValue());
            if (root.getNextFP_Growth().size() == 0) {
                changeToPath(stack, pathList); // 把值栈中的值转化为路径
            } else {
                List<FP_Growth> FP_Growths = root.getNextFP_Growth();
                for (int i = 0; i < FP_Growths.size(); i++) {
                    buildPath(stack, FP_Growths.get(i), pathList);
                }
            }
            stack.remove(stack.size() - 1);
        }
    }

    /**
     * 6.1.1 把值栈中的值转化为路径
     * 
     * @param path
     * @param pathList
     */
    public void changeToPath(List<String> path, List<String> pathList) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < path.size(); i++) {
            if (path.get(i) != null) {
                sb.append(path.get(i) + " ");
            }

        }
        pathList.add(sb.toString().trim());

    }
    /**
     * 6.2 生成子集
     * @param sourceSet
     * @param result
     */
    public void buildSubSet(List<String> sourceSet, List<List<String>> result) {

        if (sourceSet.size() == 1) {
            List<String> set = new ArrayList<String>();
            set.add(sourceSet.get(0));
            result.add(set);
        } else if (sourceSet.size() > 1) {

            buildSubSet(sourceSet.subList(0, sourceSet.size() - 1), result);
            int size = result.size();

            List<String> single = new ArrayList<String>();
            single.add(sourceSet.get(sourceSet.size() - 1));
            result.add(single);

            List<String> clone;
            for (int i = 0; i < size; i++) {
                clone = new ArrayList<String>();
                for (String str : result.get(i)) {
                    clone.add(str);
                }
                clone.add(sourceSet.get(sourceSet.size() - 1));

                result.add(clone);
            }
        }
    }
    public void setMinSup(int minSup) {
        this.minSup = minSup;
    }
}